#!/usr/bin/env osascript

# Note: For most tests, we create the new tab in the front window, both because that is ttab's core feature (a simple `do script` without a target will open a tab in a new window).
#       Also, opening new tabs in the front window is less visually disruptive.
#       Note that while the tests terminate the new tab's shell, the tab itself may stay open, depending on its settings.

# Determine the absolute path of `ttab`, because we'll be changing the working dir. before invoking it.
set ttabBin to (system attribute "PWD") & "/../bin/ttab"

tell application "Terminal"'s front window
    
  set tabCountBefore to count of tabs
  set thisTab to selected tab
    
  # Inside a *subshell*, change to /, then create a tab requesting not to change the working dir.
  # Without -d '', ttab would normally change to / (via an explicitly issued `cd` command), but
  # without it, the PWD should either be / or, potentially, whatever the default shell profile
  # changed it to.
  do shell script "(cd / && " & ttabBin & " -d '')"
  
  if not (count of tabs) > tabCountBefore then error "Failed to create tab in front window."
  
  # Wait till tab has finished starting up.
  my waitUntilTerminalTabNotBusy(it, 3)

  do script "pwd >/tmp/_ttab_test_tmpout" in selected tab

  # !! `do script` is apparently asynchronous, so we must wait a little 
  # !! to give the above command time to execute.  
  delay 1

  try
    # We expect the new tab's $PWD *not* to be /
    do shell script "[[ $(</tmp/_ttab_test_tmpout) != / ]]; ec=$?; rm -f /tmp/_ttab_test_tmpout; exit $ec"
  on error
    set selected tab to thisTab # Re-select the previously active tab so that the error message shows.
    error "New tab unexepectly has working directory /, suggesting that it was explicitly changed."
  end try

  # Tabs don't understand `close`, but `do script "exit"` is preferable anyway (assuming the settings close the tab once the shell exits),
  # because it waits for the tab to be ready to process the command.
  -- do script "exit" in selected tab
  set selected tab to thisTab # Re-select the previously active tab
  
end tell


return


on waitUntilTerminalTabNotBusy(tabTarget, timeoutSecs)
  local elapsedSoFar
  set elapsedSoFar to 0
  tell application "Terminal"
    repeat while (busy of tabTarget)
      if elapsedSoFar â‰¥ timeoutSecs then
        error "Terminal tab '" & (name of tab) & "' is unexpectedly still busy after " & timeoutSecs & " seconds."
      end if
      delay 0.1
      set elapsedSoFar to elapsedSoFar + 0.1
    end repeat
  end tell
end waitUntilTerminalTabNotBusy
